global:
  imageRegistry: 172.16.109.168:8082/egs
  profile:
    openshift: false


operator:
  image: worker-operator-ent-egs
  tag: 1.15.2
  pullPolicy: IfNotPresent
  logLevel: INFO
  env:
    - name: DCGM_EXPORTER_JOB_NAME
      value: gpu-metrics   
  labels:
    control-plane: controller-manager
  annotations:
    kubectl.kubernetes.io/default-container: manager
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"
  excludeNamespaces:
  - "kube-system"
  - "default"
  - "kubeslice-controller"
  - "kubeslice-system"
  - "kube-node-lease"
  - "kube-public"
  - "istio-system"

controllerSecretName: kubeslice-controller-secret #default name used if not specify any name
## Base64 encoded secret values from controller cluster
controllerSecret:
  namespace: "a3ViZXNsaWNlLWF2ZXNoYQ==" # Using kubeslice-avesha instead of kubeslice-controller
  endpoint: "aHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjOjQ0Mw==" # Using https://kubernetes.default.svc:443 instead of https://172.16.20/dkp/api-server:6443 because it could not verify tls. 
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2akNDQWRLZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJMU1Ea3hNREE1TWprd04xb1hEVE0xTURrd09EQTVNelF3TjFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGJ2CnB3SmFmVWtIWWFZSko5M3ZFbEhKVGRxWmppT3VvbU05KzY3K1ZlYkxzM3YrUjdOS3RSWHpndkcvYkp5NW9vQWIKTm5tdmtoSnhtZVQ3T0JwLytCTG9zWC9IS1RLdXloZ3dubkJaU1J3MTRqcTZPVUNBZ1RoWG1VdzY1M1kzekZWcQpMaVNlOUd2cytCVVRsTE5uMnpJMWJGSkdFTFhnK3pBMlZ0N2hqZE51d3NXOVJSTVV3T3pTa0FNSlNFeVVPWkkvCkRFb3ZmL3RvNGY2Zk4yWGpMS1VsK2F6dktiU3EyYWRnc3FjVTBPbnNnRGJYYUd0TFR5MThPR05KZXllcXZsVmQKcy9NZE5CcjA5OCtUU3dlcDQ3cEZoeTFKREVJZHlncGpqbFlhRTV6R0c1aTNjSEkvK3J4bGtVNjBsRlFRL1QrRgptZEFjOGtHTEhuWDJCUWo5V0FNQ0F3RUFBYU5GTUVNd0RnWURWUjBQQVFIL0JBUURBZ0trTUJJR0ExVWRFd0VCCi93UUlNQVlCQWY4Q0FRQXdIUVlEVlIwT0JCWUVGSFJnYkE3ZWlIVmFheTBVQU1EN3R4Tkt5dW52TUEwR0NTcUcKU0liM0RRRUJDd1VBQTRJQkFRQnpOQnBTRkVJTU5KMnZlL2VRSU13RjJiNUtuckpGa005ZmtNSWFUWDBCbEJxMQpBSzR2dHI5N1NpRUs4T3dSYU1xNjVSSzFqZXlwcVNIL002VXhnNmtZUGltaERHU3B5ZUhGcmtyNU5jZDhicXMvCnVVdjlIbC9GbGc0OFNYWENIVmRNQ1I5cXVqMWo4UU1hQmNHWEhSUUttKzJURVhjcUJaSFZXSVBBbnNDeEEva3QKZ09uQWs0OVN6Y2FKaUJJZHpyWEttN0RCazY3UzMrWDF6TVNwaFNmNngreHA0bGJRR1JDU1V3eXBPYXBLUTc2MwpWZWRyc3R4c2dZeWVEQkpHa01WNXQ2OGtBS0o2T29mMEJZOWZjZlp4S0taZ2ZVd0doT3JjT1lsVDUzQkphYTN6CndkdHNVZ2p0TXhHZ2k5ZlhNbkFYTGVmNDlkdWErb0NXczdZQUNPcXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  token: "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkluVlBVVzgwYm14NFdteHhXbmN3WkdFd2NYSmliV1pJZFVvMFdGaFRVMWszZVRWTllTMXViRVJDZGswaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUpyZFdKbGMyeHBZMlV0WVhabGMyaGhJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbXQxWW1WemJHbGpaUzF5WW1GakxYZHZjbXRsY2kxMGNtY3RibXR3TFhkcmJDMHdNREVpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pYTNWaVpYTnNhV05sTFhKaVlXTXRkMjl5YTJWeUxYUnlaeTF1YTNBdGQydHNMVEF3TVNJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExuVnBaQ0k2SW1JeE1EWTRZemd4TFdWa01XTXRORFE0T1MwNFpXUTJMVGxoTnpRMVpHSm1Oek00WmlJc0luTjFZaUk2SW5ONWMzUmxiVHB6WlhKMmFXTmxZV05qYjNWdWREcHJkV0psYzJ4cFkyVXRZWFpsYzJoaE9tdDFZbVZ6YkdsalpTMXlZbUZqTFhkdmNtdGxjaTEwY21jdGJtdHdMWGRyYkMwd01ERWlmUS5GMzFneUFCd3I4OFh6VWU3VUVCT0R1My1HeHA3OFZXWFhIc3A4VmVTRVl1QkNhVWNmTnI0ODE3VlNyaEs2eDB5RFltdlVuQ29qMHZKSmJZeHZZNW5rU0V2TDR4Q0FyZnllc1NJcHBDaVlfek1aNUVkX1U1SzU0Qjc1TDlrdm5hdXN0UUpCVWU4Tlc3X1VXWC15ZUw5Y0YzTTlnVXd5YnlwTlE4QU0ya2NCc0d6WHFGYzRnNzNxYVhTVHVqR2wzZm9CUU84RE5UcHgzQjc1LThKT20zZmVpVzBHd29UMjVPamJHdHJMZTNSeDdpbHZPalVfQ3k3Wm1panE2bDYtMlFrMjJ0UDBUalpFbHZhNDdBc3VxcngxTHdoZV9uZ1ZaMFd4cHF6SHFGSlpBdzR3SUhiNEJVc1M5TkJYckpNYXdzVDd4QlpzbkJBNk13MUxlS2UyZF9GWkE="

cluster:
  name: trg-nkp-wkl-001
  nodeIp: # This field is deprecated. You can set nodeIPs through cluster spec.
  endpoint: https://172.16.102.20/dkp/api-server:6443

router:
  image: cmd-nse-vl3
  tag: 1.0.6
  pullPolicy: IfNotPresent                                                                                     

routerSidecar:
  image: kubeslice-router-sidecar
  tag: 1.4.6
  pullPolicy: IfNotPresent

gateway:
  image: gw-sidecar
  tag: 1.0.5
  pullPolicy: IfNotPresent
  logLevel: INFO

gatewayEdge:
  image: slicegw-edge
  tag: 1.0.6

openvpn:
  server:
    image: openvpn-server.alpine
    tag: 1.0.4
    pullPolicy: IfNotPresent
  client:
    image: openvpn-client.alpine
    tag: 1.0.4 
    pullPolicy: IfNotPresent

wireguard:
  server:
    image: wireguard-server.alpine
    tag: 1.0.0
    pullPolicy: IfNotPresent
  client:
    image: wireguard-client.alpine
    tag: 1.0.0
    pullPolicy: IfNotPresent

dns:
  image: dns
  tag: 0.1.4
  pullPolicy: IfNotPresent
  service: 
    type: ClusterIP
  labels:
    app: kubeslice-dns
  annotations: {}
  containerSecurityContext: 
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: {}
    # runAsUser: 65536               # Non-root user
    # runAsGroup: 65536              # Non-root group
    # runAsNonRoot: true             # Ensure the container does not run as root
    # seccompProfile:
    #   type: RuntimeDefault
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 50m
      memory: 128Mi
  tolerations:
    - key: "kubeslice.io/node-type"
      operator: "Equal"
      value: "gateway"
      effect: "NoSchedule"
    - key: "kubeslice.io/node-type"
      operator: "Equal"
      value: "gateway"
      effect: "NoExecute"
  affinity:
    nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubeslice.io/node-type
                operator: In
                values:
                - gateway

envoy:
  gateway:
    image: envoygateway
    tag: v1.0.3
  proxy:
    image: envoyproxy-distroless
    tag: 1.30.4

istio:
  proxy:
    image: proxyv2
    tag: 1.16.1

aiops:
  image: kube-aiops-operator
  tag: 1.15.1
  pullPolicy: IfNotPresent
  logLevel: INFO
  labels:
    control-plane: aiops-controller-manager
  annotations:
    kubectl.kubernetes.io/default-container: manager
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 5m
      memory: 64Mi
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

egsAgent:
  image: egs-agent
  tag: 1.0.1
  pullPolicy: IfNotPresent
  logLevel: INFO
  secretName: egs-agent-access
  agentSecret:
    endpoint: https://172.16.102.20/dkp/api-server:6443
    key: eyJhbGciOiJSUzI1NiIsImtpZCI6InVPUW80bmx4WmxxWncwZGEwcXJibWZIdUo0WFhTU1k3eTVNYS1ubERCdk0ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlc2xpY2UtYXZlc2hhIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVzbGljZS1yYmFjLXJ3LWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Imt1YmVzbGljZS1yYmFjLXJ3LWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYjE1NjExZTgtZTBjNS00MTlkLTlhZGYtMTQzOWIxZTVhYWFlIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVzbGljZS1hdmVzaGE6a3ViZXNsaWNlLXJiYWMtcnctYWRtaW4ifQ.ZztxSIYliY7hpy_eYz9nPIiFzX4w7Moldce6sl3NAKtJJBnuA_Y00nzi5x5FvOvRqMUfu1fxpnhUTA3LnPAefR7smWl4R__8ZzzuDH8HvAYQBmJzwlOVJcMsoF4WjTUlzy-qY8_PzNyuLGBOHnuc1YuowrwiNamoqkPnJb3veRibwTfFau5vOf7rPuR3LqIl_NLR_Li_EJKEDJkNB8_NCeKQqINpDHdGcgMCy45IcJWOwSjH3OcoSrgtVThXUEe7QnQwLRN7jLDbvq3eWXVPZFEU143FqlsvE3uC6CBjyeLOmL_5gCQHMGZgQbiTBigPa3wuLFdKD2e2g5_R0MQHmQ
  labels:
    control-plane: egs-agent
  annotations: {}
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

egs:
  prometheusEndpoint: "http://prometheus-kube-prometheus-prometheus.egs-monitoring.svc:9090"
  grafanaDashboardBaseUrl: "http://prometheus-grafana.egs-monitoring.svc:80/d/Oxed_c6Wz"

workerInstaller:
  image: worker-installer
  tag: 1.8.0

jaeger:
  enabled: false

events:
  disabled: false

kserve:
  enabled: false
  # KServe chart options
  kserve:
    controller:
      gateway:
        domain: ""
        ingressGateway:
          className: "nginx"

metrics:
  insecure: false
  metricResolution: "15s"
  imagePullPolicy: IfNotPresent

rbacproxy:
  # Image name for the RBAC proxy
  image: kubebuilder-kube-rbac-proxy
  # Image tag for the RBAC proxy
  tag: 0.18.2
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true

alpine:
  # Image name for the alpine
  image: alpine-k8s
  # Image tag for the alpine
  tag: 1.0.1

imagePullSecretsName: "kubeslice-image-pull-secret"
# leave the below fields empty if secrets are managed externally.
imagePullSecrets: 
  repository: "http://172.16.109.168:8082/egs" ## Value to be used incase using the docker hub images-  https://index.docker.io/v1/
  username: "admin"
  password: "P@ssw0rd123456"
  email: "admin@example.org"
  dockerconfigjson: "" ## Value to be used if using external secret managers

controllerNamespace: kubeslice-controller

# enable/disable network component installation
kubesliceNetworking:
  enabled: true

nsm:
  spire:
    priorityClassName: ""
    spire-server:
      priorityClassName: ""
    spiffe-csi-driver:
      priorityClassName: ""

